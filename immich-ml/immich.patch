diff --git a/machine-learning/app/models/base.py b/machine-learning/app/models/base.py
index 3bbd1a0..3f5cd11 100644
--- a/machine-learning/app/models/base.py
+++ b/machine-learning/app/models/base.py
@@ -13,6 +13,7 @@ from app.sessions.ort import OrtSession
 from ..config import clean_name, log, settings
 from ..schemas import ModelFormat, ModelIdentity, ModelSession, ModelTask, ModelType
 from ..sessions.ann import AnnSession
+from ..sessions import rknn
 
 
 class InferenceModel(ABC):
@@ -108,6 +109,8 @@ class InferenceModel(ABC):
                 session: ModelSession = AnnSession(model_path)
             case ".onnx":
                 session = OrtSession(model_path)
+            case ".rknn":
+                session: ModelSession = rknn.RknnSession(model_path)
             case _:
                 raise ValueError(f"Unsupported model file type: {model_path.suffix}")
         return session
@@ -155,4 +158,9 @@ class InferenceModel(ABC):
 
     @property
     def _model_format_default(self) -> ModelFormat:
-        return ModelFormat.ARMNN if ann.ann.is_available and settings.ann else ModelFormat.ONNX
+        if rknn.is_available():
+            return ModelFormat.RKNN
+        elif ann.ann.is_available:
+            return ModelFormat.ARMNN
+        else:
+            return ModelFormat.ONNX
diff --git a/machine-learning/app/schemas.py b/machine-learning/app/schemas.py
index d513fae..6f90768 100644
--- a/machine-learning/app/schemas.py
+++ b/machine-learning/app/schemas.py
@@ -35,6 +35,7 @@ class ModelType(StrEnum):
 class ModelFormat(StrEnum):
     ARMNN = "armnn"
     ONNX = "onnx"
+    RKNN = "rknn"
 
 
 class ModelSource(StrEnum):
diff --git a/machine-learning/app/sessions/rknn.py b/machine-learning/app/sessions/rknn.py
new file mode 100644
index 0000000..7400af1
--- /dev/null
+++ b/machine-learning/app/sessions/rknn.py
@@ -0,0 +1,92 @@
+from __future__ import annotations
+
+import ast
+import platform
+from pathlib import Path
+from typing import Any, NamedTuple
+
+import numpy as np
+from numpy.typing import NDArray
+
+from rknnlite.api import RKNNLite
+from app.schemas import SessionNode
+
+from ..config import log, settings
+
+
+DEVICE_COMPATIBLE_NODE = '/proc/device-tree/compatible'
+
+def is_available() -> bool:
+    return True if get_target() != None else False
+
+def get_target() -> str:
+    system = platform.system()
+    machine = platform.machine()
+    os_machine = system + '-' + machine
+    if os_machine != 'Linux-aarch64':
+        return None
+    path = Path(DEVICE_COMPATIBLE_NODE)
+    if path.exists():
+        with path.open() as f:
+            for line in f.read().split("\0"):
+                if line.startswith("rockchip,rk"):
+                    return line[9:]
+    return None
+
+class RknnSession:
+    """
+    Wrapper for RKNN to be drop-in replacement for ONNX session.
+    """
+
+    def __init__(self, model_path: Path, cache_dir: Path = settings.cache_folder) -> None:
+        self.model_path = model_path
+        self.cache_dir = cache_dir
+        self.rknn = RKNNLite()
+
+        # load model
+        log.info("Loading RKNN model %s ...", model_path)
+        self.model = self.rknn.load_rknn(model_path.as_posix())
+        log.info("Loaded RKNN model with ID %d", self.model)
+
+        # read attributes
+        start = self.rknn.rknn_data.find(b"{'attrs'")
+        end = self.rknn.rknn_data.find(b'\x00', start)
+        block = self.rknn.rknn_data[start:end]
+        self._attrs = ast.literal_eval(block.decode("utf-8"))
+
+        # init runtime
+        self.rknn.init_runtime(target=get_target(), core_mask=RKNNLite.NPU_CORE_0)
+
+    def __del__(self) -> None:
+        self.rknn.release()
+        log.info("Unloaded RKNN model %d", self.model)
+
+    def get_inputs(self) -> list[SessionNode]:
+        inputs = []
+        for a in self._attrs.values():
+            for key, val in dict(a).items():
+                if val.get("is_output") == False:
+                    inputs.append(RknnNode(key, val["shape"]))
+        return inputs
+
+    def get_outputs(self) -> list[SessionNode]:
+        outputs = []
+        for a in self._attrs.values():
+            for key, val in dict(a).items():
+                if val.get("is_output") == True:
+                    outputs.append(RknnNode(None, val["shape"]))
+        return outputs
+
+    def run(
+        self,
+        output_names: list[str] | None,
+        input_feed: dict[str, NDArray[np.float32]] | dict[str, NDArray[np.int32]],
+        run_options: Any = None,
+    ) -> list[NDArray[np.float32]]:
+        inputs: list[NDArray[np.float32]] = [np.ascontiguousarray(v) for v in input_feed.values()]
+        return self.rknn.inference(inputs)
+
+
+class RknnNode(NamedTuple):
+    name: str | None
+    shape: tuple[int, ...]
